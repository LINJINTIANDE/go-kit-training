// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package http

import (
	"context"

	"github.com/go-kit/kit/endpoint"

	"gk-middlewarer/service"
)

// makeUppercaseEndpoint creates a github.com/go-kit/kit/endpoint.Endpoint for github.com/OahcUil94/go-kit-training/gk-middlewarer/service.StringService.Uppercase.
// It will automatically wrap and unwrap the arguments and results of the method.
func makeUppercaseEndpoint(stringService service.StringService) endpoint.Endpoint {
	return func(_ctx context.Context, request interface{}) (resp interface{}, err error) {
		req := request.(*uppercaseRequest)
		var _resp uppercaseResponse
		_resp.embedMime = new(embedMime)

		str := req.Str

		upper, err := stringService.Uppercase(str)

		_resp.Upper = upper
		_resp.Err = err

		if mime := req.GetMime(); mime != "" {
			_resp.SetMime(mime)
		}
		resp = _resp

		return
	}
}

// makeCountEndpoint creates a github.com/go-kit/kit/endpoint.Endpoint for github.com/OahcUil94/go-kit-training/gk-middlewarer/service.StringService.Count.
// It will automatically wrap and unwrap the arguments and results of the method.
func makeCountEndpoint(stringService service.StringService) endpoint.Endpoint {
	return func(_ctx context.Context, request interface{}) (resp interface{}, err error) {
		req := request.(*countRequest)
		var _resp countResponse
		_resp.embedMime = new(embedMime)

		str := req.Str

		count := stringService.Count(str)

		_resp.Count = count

		if mime := req.GetMime(); mime != "" {
			_resp.SetMime(mime)
		}
		resp = _resp

		return
	}
}
