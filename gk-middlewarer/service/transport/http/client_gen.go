// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package http

import (
	"context"
	"time"

	"github.com/go-kit/kit/endpoint"

	"gk-middlewarer/service"
)

var _ service.StringService

// DefaultRequestTimeout represents an overwritable Request timeout.
var DefaultRequestTimeout = time.Second

type clientStringService struct {
	uppercaseEndpoint endpoint.Endpoint
	countEndpoint     endpoint.Endpoint
}

// Uppercase implements github.com/OahcUil94/go-kit-training/gk-middlewarer/service.StringService
func (stringservice clientStringService) Uppercase(str string) (upper string, err error) {

	_ctx := context.Background()
	_ctx, _ctxCancelFunc := context.WithTimeout(_ctx, DefaultRequestTimeout)
	defer _ctxCancelFunc()

	_request := uppercaseRequest{
		Str: str,
	}

	_request.embedMime = new(embedMime)

	_response, err := stringservice.uppercaseEndpoint(
		_ctx,
		&_request,
	)

	if err != nil {
		return
	}

	var ok bool
	err, ok = _response.(error)
	if ok {
		// we received an error from the server, so we'll return here.
		// if the Method has a return type named err, this will come through
		// it.
		return
	}

	_resp := _response.(*uppercaseResponse)

	upper = _resp.Upper
	err = _resp.Err

	return
}

// Count implements github.com/OahcUil94/go-kit-training/gk-middlewarer/service.StringService
func (stringservice clientStringService) Count(str string) (count int) {

	_ctx := context.Background()
	_ctx, _ctxCancelFunc := context.WithTimeout(_ctx, DefaultRequestTimeout)
	defer _ctxCancelFunc()

	_request := countRequest{
		Str: str,
	}

	_request.embedMime = new(embedMime)

	_response, err := stringservice.countEndpoint(
		_ctx,
		&_request,
	)

	if err != nil {
		return
	}

	var ok bool
	err, ok = _response.(error)
	if ok {
		// we received an error from the server, so we'll return here.
		// if the Method has a return type named err, this will come through
		// it.
		return
	}

	_resp := _response.(*countResponse)

	count = _resp.Count

	return
}
