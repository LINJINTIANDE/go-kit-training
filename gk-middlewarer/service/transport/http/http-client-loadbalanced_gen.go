// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package http

import (
	"context"

	kitendpoint "github.com/go-kit/kit/endpoint"
	kitsd "github.com/go-kit/kit/sd"
	kitloadbalancer "github.com/go-kit/kit/sd/lb"
	httptransport "github.com/go-kit/kit/transport/http"

	"gk-middlewarer/service"
	"gk-middlewarer/service/endpoint"
)

// LoadBalancerRetryCount refers to the number of times the Loadbalanced backed
// client will attempt to get an endpoint.
var LoadBalancerRetryCount = 3

// endpointFromLoadBalancer is a nice helper function that will pull an endpoint
// off of a load balancer and initiate the request.  However, if an error is
// encountered, it will handle it instead.
func endpointFromLoadBalancer(lb kitloadbalancer.Balancer) kitendpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var ep kitendpoint.Endpoint
		var err error
		for i := 0; i < LoadBalancerRetryCount; i++ {
			ep, err = lb.Endpoint()
			if err != nil && err != kitloadbalancer.ErrNoEndpoints {
				continue
			}
			break
		}

		if err != nil {
			return nil, err
		}

		return ep(ctx, request)
	}
}

// GetLoadBalancerFunc describes a function which takes a
// github.com/go-kit/kit/loadbalancer.LoadBalancer and returns a
// github.com/go-kit/kit/loadbalancer.LoadBalancer
type GetLoadBalancerFunc func(kitsd.Factory) kitloadbalancer.Balancer

// NewLoadBalancedClient is a function that will return a Load balanced
// client based on the load balancing conversion function provided.
func NewLoadBalancedClient(get GetLoadBalancerFunc, wrappers ...ClientLayer) service.StringService {
	return NewLoadBalancedClientWithConfig(get, ClientConfig{ClientLayers: wrappers})
}

// NewLoadBalancedClientWithOptions is a function that will return a Load balanced
// client based on the load balancing conversion function provided.
func NewLoadBalancedClientWithOptions(get GetLoadBalancerFunc, wrappers []ClientLayer, options []httptransport.ClientOption) service.StringService {
	return NewLoadBalancedClientWithConfig(get, ClientConfig{ClientLayers: wrappers, Options: options})
}

func NewLoadBalancedClientWithConfig(get GetLoadBalancerFunc, config ClientConfig) service.StringService {
	if config.Method == "" {
		config.Method = "GET"
	}

	return &clientStringService{

		uppercaseEndpoint: endpointFromLoadBalancer(get(clientFactory(endpoint.PathUppercase, encodeUppercaseRequest, decodeUppercaseResponse, config))),
		countEndpoint:     endpointFromLoadBalancer(get(clientFactory(endpoint.PathCount, encodeCountRequest, decodeCountResponse, config))),
	}
}
